// Importamos el modelo de art√≠culos que contiene las funciones para interactuar con la base de datos
const articlesModel = require('../models/articlesModel');

// Controlador para obtener todos los art√≠culos
async function getAllController(req, res) {
    try {
        // Llamamos al modelo para obtener los datos desde la base de datos
        const data = await articlesModel.getAllArticles();

        // Enviamos la respuesta con los datos en formato JSON
        res.json(data);
    } catch (err) {
        // Si ocurre un error, respondemos con un c√≥digo 500 y el mensaje del error
        res.status(500).json({ error: err.message });
    }
}

// Para buscar un producto por su nombre o parte de √©l, si existe
async function searchController(req, res) {
    try {
        const { name_article } = req.query;
        console.log("üü¢ name_article recibido:", name_article);

        const data = await articlesModel.searchArticle(name_article);

        res.json(data);
    } catch (err) {
        console.error('‚ùå Error en searchController:', err);
        res.status(500).json({ error: err.message });
    }
}

//para obtener un art√≠culo por su id
async function getByIdController(req, res) {
    try {
        const { id } = req.params;

        const parsedId = parseInt(id, 10);

        if (isNaN(parsedId)) {
            return res.status(400).json({ error: "ID inv√°lido. Debe ser un n√∫mero entero." });
        }

        const data = await articlesModel.getArticleById(parsedId);

        res.json(data);
    } catch (err) {
        console.error("‚ùå Error en getByIdController:", err);
        res.status(500).json({ error: err.message });
    }
}


// Controlador para crear un nuevo art√≠culo
async function createController(req, res) {
    try {
        // Obtenemos los datos enviados en el cuerpo de la solicitud
        const { name_article, price } = req.body;

        // ‚úÖ Validaci√≥n del nombre del art√≠culo
        if (!name_article || typeof name_article !== 'string' || name_article.trim() === '') {
            return res.status(400).json({
                error: 'El nombre del art√≠culo es obligatorio y debe ser un string.'
            });
        }

        // ‚úÖ Validaci√≥n del precio del art√≠culo
        if (price === undefined || isNaN(price)) {
            return res.status(400).json({
                error: 'El precio del art√≠culo es obligatorio y debe ser un n√∫mero.'
            });
        }

        // ‚ö†Ô∏è Asegurarse de que el precio sea un n√∫mero (por si viene como string)
        const numericPrice = parseFloat(price);

        // Llamamos al modelo para insertar el nuevo art√≠culo en la base de datos
        await articlesModel.addArticle(name_article, numericPrice);

        // ‚úÖ Respuesta de √©xito si el art√≠culo fue creado correctamente
        res.status(201).json({ message: 'Art√≠culo creado correctamente.' });

    } catch (error) {
        // Si ocurre un error inesperado, respondemos con c√≥digo 500 y el mensaje de error
        res.status(500).json({ error: error.message });
    }
}

//para actualizar un art√≠culo
async function updateController(req, res) {
    try {
        const { id } = req.params

        const { name_article, price } = req.body

        await articlesModel.updateArticle(id, name_article, price)

        res.status(201).json({ message: 'Art√≠culo actualizado correctamente.' });

    } catch (error) {

        res.status(500).json({ error: error.message });

    }
}

// Exportamos los controladores para que puedan ser utilizados en las rutas
module.exports = { getAllController, createController, updateController, 
    getByIdController, searchController
};
